Lexer:
    Used flex to tokenize input file, requiring us to define regular expressions for accepted input text.

Parser:
    Used bison to parse tokens from lexer, requiring us to define context free grammar for accepted grammar.

HW4: Split functionality up into separate C/C++ files, like so
- decaf-codegen.lex, provides lexer functionality by defining regular expressions to tokenize input text.
- decaf-codegen.y, provides parser functionality and is the core of the program.
- symbol-table.cpp, provides symbol table functionality by maintaining names of functions, variables, etc..
- expr-asts.cpp, defines all classes used in code generation.
- llvm-util.cpp, defines useful functions for LLVM code generation.
- llvm-pass.cpp, defines code used in code optmization, maintains a FunctionPassManager.
- value-constants.cpp, defines constants used through code, such as error messages and codes.

Noteworthy designs:
- In order to be able to call functions that were not declared/defined until afterwards, all code within a function
  had to be defered until the after the scanner and parser had completed their duties. Initially we were procedurally
  generating our code but tests such as backward.decaf disallowed this. We therefore had to define the functions, such as
  to produce a prototype, and store all the statements contained in the function in a list (deque). We then called our
  recursive generateCode() function on all those in the list at the end. See generateClass function in decaf-codegen.y (line 628).

Optimizations - see llvm-pass.cpp
- Implemented all required optimizations by adding the following to our FunctionPassManager in llvm-pass.cpp:
    - createBasicAliasAnalysisPass(), which added support for GVN.
    - createPromoteMemoryToRegisterPass(), which converts stack allocation (alloca) into register usage (mem2reg)
    - createInstructionCombiningPass(), which provides peephole optimizations
    - createReassociatiePass(), which provides the re-associate expression optimizations
    - createGVNPass(), which eliminates common sub-expressions (GVN)
    - createCFGSimplificationPass(), which simplifies the control flow graph

These optimizations were perform on the functions in question after all the code was generated, see line 104 of expr-ast.cpp.

In order to apply these optimizations without indefinite hanging or test failures, we had to ensure that there were no statements 
after a terminating statement, such as a ret or br, in a given block.

Common cases were a ret instruction following a another ret instruction. Like so:
    ret %ex
    ret 0
Or a br statement following a return. Like so:
    ret %ex
    br %next

To ensure that this did not happen, we frequently had to ensure that no terminating statement was generated as of that point.
By using the GetInsertBlock() function from the builder, and the getTerminator() method of that block, we were able to do such.
We had to constantly check for such whenever generating code for any "block", and we had to check prior to generating a branch
statement, as to avoid an unnecessary branch. By doing so, optimizations executed without hanging or test failures.